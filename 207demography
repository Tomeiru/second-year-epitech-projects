#!/usr/bin/env lua

function print_error(param)
    print(param)
    os.exit(84)
end

function print_usage()
    print("USAGE\n    ./207demography code [...]\n\nDESCRIPTION\n    code    country code");
    os.exit(0)
end

function check_usage()
    if ((#arg == 1) and (arg[1] == "-h")) then
        print_usage()
    end
end

function check_number_arg()
    if (#arg == 0) then
        print_error("Program needs at least an argument")
    end
end

function check_opening_of_csv()
    local f = io.open("207demography_data.csv", "r")
    if f~=nil then
        io.close(f)
        return true
    else
        return false
    end
end

function get_csv_info()
    local csv = {}
    for line in io.lines("207demography_data.csv") do
        local tableLine = {}
        for match in (line..";"):gmatch("(.-)"..";") do
            table.insert(tableLine, match);
        end
        table.insert(csv, tableLine);
    end
    --table.remove(csv, 1)
    return (csv)
end

function check_existence_in_csv()
    --for i = 1, #
    local ret = {}
    local bool = 0

    table.insert(ret, csv[1])
    for y = 1, #arg do
        for i = 2, #csv do
            if (csv[i][2] == arg[y]) then
                table.insert(ret, csv[i])
                bool = 1
            end
        end
        if (bool == 0) then
            print_error("Argument is not in the CSV")
        end
        bool = 0
    end
    return ret;
end

function before_main()
    check_usage()
    check_number_arg()
    check_opening_of_csv()
    csv = get_csv_info()
    csv_line = check_existence_in_csv()
    return (csv_line)
end

function print_first_line(csv_lines)
    io.write("Country: ")
    for i = 1, #csv_lines - 1 do
        io.write(string.format("%s, ", csv_lines[i][1]))
    end
    print(csv_lines[#csv_lines][1])
end

function create_matrix_from_lines(csv_lines)
    local matrix = {}
    local value_line = {}
    local one_line = {}

    for i = 3, #csv_lines[1] do
        table.insert(value_line, 0);
        table.insert(one_line, 1);
    end
    for i = 1, #csv_lines do
        for ii = 3, #csv_lines[i] do
            value_line[ii - 2] = value_line[ii - 2] + tonumber(csv_lines[i][ii])
        end
    end
    table.insert(matrix, one_line)
    table.insert(matrix, value_line)
    return (matrix)
end

function print_matrix(matrix)
    for i = 1, #matrix do
        for ii = 1, #matrix[i] do
            io.write(string.format("[%f]", matrix[i][ii]))
        end
        print("")
    end
end

function transpose_matrix(matrix)
    local new = {}
    local up = {}
    local down = {}
    for i = 1, #matrix do
        table.insert(up, matrix[i][2])
        table.insert(down, matrix[i][1])
    end
    table.insert(new, up)
    table.insert(new, down)
    return (new)
end
--[[
function matrix_multiply(matrix, t_matrix)
    local result = {}
    local top = {}
    local bot = {}
    local a = 0.0
    local b = 0.0
    local c = 0.0
    local d = 0.0

    for i = 1, #matrix[1] do
        a = a + (matrix[1][i] * t_matrix[i][1])
        b = b + (matrix[1][i] * t_matrix[i][2])
        c = c + (matrix[2][i] * t_matrix[i][1])
        d = d + (matrix[2][i] * t_matrix[i][2])
    end
    table.insert(top, a)
    table.insert(top, b)
    table.insert(bot, c)
    table.insert(bot, d)
    table.insert(result, top)
    table.insert(result, bot)
    return (result)
end


M = | 1 1 |   M ^ T = | 1 2 4 0 |
    | 2 3 |           | 1 3 4 1 |
    | 4 4 |
    | 0 1 |

    matrice 2 4
    matrice 4 2
    = matrice 2 2

    matrice np
    matrice pm
    = matrice nm
    = crÃ©tation d'un tableau de tableau de m row
    result 0 -> n
    result 0 -> m

]]--

function matrix_multiply(matrix, t_matrix)
    local result = {}

    for i = 1, #matrix do
        table.insert(result, {})
    end
    for n = 1, #matrix do -- n
        for m = 1, #t_matrix[1] do -- m
            local value = 0
            for p = 1, #matrix[1] do -- p
                value = value + matrix[n][p] * t_matrix[p][m]
            end
            result[n][m] = value
        end
    end
    return (result)
end

function invert_matrix(matrix)
    if ((matrix[1][1] * matrix[2][2] - matrix[1][2] * matrix[2][1]) == 0) then
        print_error("Invert error")
    end
    local result = {}
    local top = {}
    local bot = {}
    local determinant = 1 / ((matrix[1][1] * matrix[2][2])-(matrix[1][2] * matrix[2][1]))
    local a = determinant * matrix[2][2]
    local b = determinant * (-matrix[1][2])
    local c = determinant * (-matrix[2][1])
    local d = determinant * matrix[1][1]
    table.insert(top, a)
    table.insert(top, b)
    table.insert(bot, c)
    table.insert(bot, d)
    table.insert(result, top)
    table.insert(result, bot)
    return (result)
end

function augment(x)
    local augmented = {}
    for i = 1, #x do
        local value = {}
        table.insert(value, 1)
        table.insert(value, x[i])
        table.insert(augmented,value)
    end
    return (augmented)
end

function better(y)
    local better = {}
    for i = 1, #y do
        local value = {}
        table.insert(value, y[i])
        table.insert(better,value)
    end
    return (better)
end

function lin_fit(x, y, first)
    local augmented_x = augment(x)
    local better_y = better(y)
    local t_matrix = transpose_matrix(augmented_x)
    local mult = matrix_multiply(t_matrix, augmented_x)
    local invert = invert_matrix(mult)
    local snd = matrix_multiply(t_matrix, better_y)
    local switch_value
    local result = matrix_multiply(invert, snd)
    if (first == 1) then
        print("Fit1")
        print(string.format("    Y = %.2f X - %.2f", result[2][1] / 1000000, result[1][1] / 1000000 * -1))
        local a = result[2][1] / 1000000;
        local b = result[1][1] / 1000000;
        local MSE = 0.0
        for i = 1, #x do
            MSE = MSE + (((a * x[i] + b - y[i]) ^ 2) / i)
        end
        print(string.format("    Root-mean-square deviation: %.2f", MSE))
        local value = a * 2050 + b
        print(string.format("    Population in 2050: %.2f", value))
        return (0)
    end
    print("Fit2")
    print(string.format("    X = %.2f Y + %.2f", result[2][1] * 1000000, result[1][1]))
    local a = result[2][1] * 1000000
    local b = result[1][1]
    local MSE = 0.0
    for i = 1, #x do
        MSE = MSE + (((a * x[i] + b - y[i]) ^ 2) / i)
    end
    print(string.format("    Root-mean-square deviation: %.2f", MSE))
    local value = (2050 - b) / a
    print(string.format("    Population in 2050: %.2f", value))
end

function create_x(csv_lines)
    local x = {}
    for i = 3, #csv_lines[1] do
        x[i - 2] = 0
        x[i - 2] = x[i - 2] + tonumber(csv_lines[1][i])
    end
    return (x)
end

function create_y(csv_lines)
    local y = {}
    for i = 3, #csv_lines[1] do
        table.insert(y, 0.0);
    end
    for i = 2, #csv_lines do
        for ii = 3, #csv_lines[i] do
            y[ii - 2] = y[ii - 2] + tonumber(csv_lines[i][ii])
        end
    end
    return y;
end

function main(csv_lines)
    local x = create_x(csv_lines)
    local y = create_y(csv_lines)
    table.remove(csv_lines, 1)
    print_first_line(csv_lines)
    lin_fit(x, y, 1)
    lin_fit(y, x, 0)
end

local csv_lines = before_main()
--local a = {{1,2,3,4},{5,6,7,8}}
--local b = {{13,9,7,15}, {8,7,4,6},{6,4,0,3}}
--print_matrix(transpose_matrix(a))

main(csv_lines)
